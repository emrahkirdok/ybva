## Çoklu Doğrusal Modelleme

Öncelikle kütüphanelerimizi yükleyelim:

```{r}
library("MASS")
library("ISLR2")
```

Çoklu model oluşturmak için de yine  `lm()` fonksiyonunu kullanacağız:

$$

{\R{lm(y $\sim$ x1 + x2 + x3)}}

$$

`summary()` fonksiyonu ile modelimizin ayrıntılarını elde edebiliriz:

```{r chunk14}
lm.fit <- lm(medv ~ lstat + age, data = Boston)
summary(lm.fit)
```

Bu veri setinde 12 farklı değişken var. Bu yüzden hepsini tek tek yazmak yerine aşağıdaki gibi de yazabiliriz:

```{r chunk15}
lm.fit <- lm(medv ~ ., data = Boston)
summary(lm.fit)
```

Burada sonuçlara tek tek ulaşabiliriz:

`summary(lm.fit)$r.sq` yazdığımızda bize $R^2$, değerini verir.

Peki bu değişkenlerden bir tanesini çıkartmak istesek? Mesela `age` değişkeninin p değeri çok yüksek, onu modelden çıkartalım:

```{r chunk17}
lm.fit1 <- lm(medv ~ . - age, data = Boston)
summary(lm.fit1)
```

Alternatif olarak `update()` fonksiyonu kullanılabilr:

```{r chunk18}
lm.fit1 <- update(lm.fit, ~ . - age)
```


## Değişkenler arası etkileşim

Eğer iki değişkenin arasında etkileşim belirlemek istiyorsanız şöyle bir yazım uygulayabilirsiniz:

`lstat`$\times$`age` 

```{r chunk19}
summary(lm(medv ~ lstat * age, data = Boston))
```

## Girdilere doğrusal olmayan dönüşüm uygulama

Eğer incelenen değişkenler arasında doğrusal olmayan bir ilişki varsa bunu da doğrusal model içerisinde belirtme imkanımız var. Örnek verelim,$X$ girdisi varlığı altında $X^2$ değişkenini `I(X^2)` notasyonu ile ifade edebiliriz.

Burada `I()` fonksiyonunun özel bir işlevi bulunmaktadır. Normalde `^` karakteri üssel sayıları belirtir. Ancak bizim amacımız sembolik bir notasyon yazmak. Böyle olunca bu sembolu kullanmamız gerekidir.

```{r chunk20}
lm.fit2 <- lm(medv ~ lstat + I(lstat^2), data = Boston)
summary(lm.fit2)
```

Dikkat edersek kuadratik terim (`lstat^2`) artık çok düşük bir $p-değeri$ ile belirtildi. Yani burada kuadratik bir fonksiyon yazmamız daha iyi bir model elde etmemizi olanaklı kıldı.

Daha fazla üssel terim eklemek ve polinom fonksiyonumuzun derecesini arttırmak istersek aşağıdaki şekilde yazma imkanımız var:

```
lm(medv, poly(lstat, 5), data = Boston)
```

Bu sayede beşinci dereceden fonksiyonu otomatik olarak oluşturabiliriz:

```{r chunk23}
lm.fit5 <- lm(medv ~ poly(lstat, 5), data = Boston)
summary(lm.fit5)
```

This suggests that including additional  polynomial terms, up to fifth order, leads to an improvement in the model fit! However, further investigation of the data reveals that no polynomial terms beyond fifth order have significant $p$-values in a regression fit. 

***Bu, beşinci sıraya kadar ek polinom terimlerinin eklenmesinin model uyumunda bir iyileşmeye yol açtığını göstermektedir! Bununla birlikte, verilerin daha fazla araştırılması, beşinci derecenin ötesinde hiçbir polinom teriminin bir regresyon uyumunda anlamlı $p$ değerlerine sahip olmadığını ortaya koymaktadır.***

Peki bu üç modeli grafik üzerinden karşılaştırabilir miyiz?

```{r}
# once basit dogrusal model
lm.fit <- lm(medv ~ lstat, data = Boston)

lm.fit2 <- lm(medv ~ poly(lstat, 2), data = Boston)
lm.fit3 <- lm(medv ~ poly(lstat, 3), data = Boston)
lm.fit4 <- lm(medv ~ poly(lstat, 4), data = Boston)
lm.fit5 <- lm(medv ~ poly(lstat, 5), data = Boston)

#ggplot(data = Boston, aes(y = medv, x = lstat)) + geom_point()
plot(medv~lstat, data = Boston)
abline(lm.fit, col = "red")
points(x = Boston$lstat, y = fitted(lm.fit2), col = "purple")
points(x = Boston$lstat, y = fitted(lm.fit3), col = "green")
points(x = Boston$lstat, y = fitted(lm.fit4), col = "pink")
points(x = Boston$lstat, y = fitted(lm.fit5), col = "blue")
title("Modellerin karsilastirilmasi", sub = "Kirmizi: dogrusal model, Mor: Ikinci derece polinom, Mavi: Besinci derece polinom")

```

